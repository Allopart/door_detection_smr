#include <ros/ros.h>
#include <ros/callback_queue.h>
#include <sensor_msgs/PointCloud2.h>
#include <message_filters/subscriber.h>
#include <message_filters/synchronizer.h>
#include <message_filters/time_synchronizer.h>
#include <message_filters/sync_policies/approximate_time.h>
#include <boost/bind.hpp>
// PCL specific includes
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/PCLPointCloud2.h>
#include <pcl/conversions.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/visualization/cloud_viewer.h>
#include <pcl/console/parse.h>
#include <pcl/common/transforms.h>
#include <pcl/filters/passthrough.h>
#include <pcl/sample_consensus/ransac.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/sample_consensus/sac_model_normal_plane.h>
#include <pcl/sample_consensus/sac_model_plane.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/ModelCoefficients.h>
#include <pcl/features/integral_image_normal.h>
#include <pcl/features/normal_3d.h>
#include <pcl/io/pcd_io.h>
#include <pcl/surface/concave_hull.h>
#include <pcl_ros/transforms.h>
#include <pcl_ros/point_cloud.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <sensor_msgs/PointCloud2.h>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>
#include <cmath> 

using namespace sensor_msgs;
using namespace message_filters;
using namespace pcl;

ros::Publisher final_normal_pub;




void callback(const sensor_msgs::String turn, const std_msgs::Float32MultiArray normal, const sensor_msgs::PointCloud2ConstPtr& right, const sensor_msgs::PointCloud2ConstPtr& left)
{







int main(int argc, char** argv)
{
  ros::init(argc, argv, "Final_handle");
  
  ros::NodeHandle nh;
  message_filters::Subscriber<sensor_msgs::String> turn_sub(nh, "/door_detection/handle_turn", 1);
  message_filters::Subscriber<std_msgs::Float32MultiArray> normal_sub(nh, "/door_detection/normal", 1);
  message_filters::Subscriber<sensor_msgs::PointCloud2> right_pcl_sub(nh, "/door_detection/final_handle_right", 1);
  message_filters::Subscriber<sensor_msgs::PointCloud2> left_pcl_sub(nh, "/door_detection/final_handle_left", 1);
  final_normal_pub = nh.advertise<sensor_msgs::PointCloud2> ("/door_detection/normal_vector", 1);


  typedef sync_policies::ApproximateTime<sensor_msgs::PointCloud2, sensor_msgs::PointCloud2> MySyncPolicy;
  // ApproximateTime takes a queue size as its constructor argument, hence MySyncPolicy(10)
  Synchronizer<MySyncPolicy> sync(MySyncPolicy(4), turn_sub, normal_sub, right_pcl_sub, left_pcl_sub);
  sync.registerCallback(boost::bind(&callback, _1, _2,_3,_4));


  ros::spin ();
  return 0;

}
